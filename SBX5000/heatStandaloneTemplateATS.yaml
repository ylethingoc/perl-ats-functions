heat_template_version: 2014-10-16
description: Template to setup and deploy a 1x1 HA vSBC compute instances
# Parameters required from user or upstream application/orchestration to setup and launch 1x1 HA vSBC compute instances

parameter_groups:
- label: System Settings
  description: System Level Settings
  parameters:
  - image
  - flavor
  - security_group
  - sbc_system_name

- label: External Network Settings
  description: External Network Settings
  parameters:
  - mgt0_ext_network
  - pkt0_ext_network
  - pkt1_ext_network
  - floating_ip_count_mgt0
  - floating_ip_count_pkt0
  - floating_ip_count_pkt1

- label: Enable Reverse NAT
  description: Enable reverse nat for ports
  parameters:
  - reverse_nat_pkt0
  - reverse_nat_pkt1

- label: Private Network Settings
  description: External Network Settings
  parameters:
  - private_network_mgt0
  - private_network_ha
  - private_network_pkt0
  - private_network_pkt1

- label: Private Subnet Settings
  description: Subnet Settings
  parameters:
  - private_subnet_mgt0
  - private_subnet_ha
  - private_subnet_pkt0
  - private_subnet_pkt1

- label: Instance Specific Settings
  description: Instance Specific Settings
  parameters:
  - sbc_active_name

parameters:

############################
# System Level Settings
############################

  image:
    type: string
    label: Image Name 
    description: Image to be used for launching the instance(s)
    constraints:
      - custom_constraint: 'glance.image'

  flavor:
    type: string
    label: Flavor
    description: Flavor to be used for instance(s)

  security_group:
    type: string
    label: Security Group
    description: Security group of instance(s)

  sbc_system_name:
    type: string
    label: SBC System Name
    description: SBC system name
    constraints:
      - length: { min: 0, max: 26 }
        description: "Enter valid system name. Length of this string should be less than 26"
      - allowed_pattern: "^[A-Za-z]{1}[-A-Za-z0-9]*[A-Za-z0-9]{1}$"
        description: "Enter valid system name. Regex: ^[A-Za-z]{1}[-A-Za-z0-9]*[A-Za-z0-9]{1}$ "

############################
# External Network Settings
############################

  mgt0_ext_network:
    type: string
    label: Management Port Public Network Name or ID
    description: Public network with floating IP addresses for mgt0 (used only if "Floating IP Count" is non-zero for mgt0).
    constraints:
      - custom_constraint: 'neutron.network'

  pkt0_ext_network:
    type: string
    label: Packet Port 0 Public Network Name or ID
    description: Public network with floating IP addresses for pkt0  (used only if "Floating IP Count" is non-zero for pkt0).
    constraints:
      - custom_constraint: 'neutron.network'

  pkt1_ext_network:
    type: string
    label: Packet Port 1 Public Network Name or ID
    description: Public network with floating IP addresses for pkt1 (used only if "Floating IP Count" is non-zero for pkt1).
    constraints:
      - custom_constraint: 'neutron.network'

#############################
# Setting up the count values
#############################

  floating_ip_count_mgt0:
    type: number 
    label: Number of Floating IPs on mgt0
    description: Number of public IPs on mgt0.
    default: 0 
    constraints:
      - range: { min: 0, max: 1 }

  floating_ip_count_pkt0:
    type: number
    label: Number of Floating IPs on pkt0
    description: Number of public IPs on pkt0.
    default: 0
    constraints:
      - range: { min: 0, max: 1 }

  floating_ip_count_pkt1:
    type: number
    label: Number of Floating IPs on pkt1
    description: Number of public IPs on pkt1.
    default: 0
    constraints:
      - range: { min: 0, max: 1 }

#################################################
# Enable/Disable Reverse NAT feature on the ports
#################################################

  reverse_nat_pkt0:
    type: string
    label: Reverse NAT on pkt0
    description: Enable/Disable reverse NAT on pkt0.
    default: True
    constraints:
      - allowed_values: [True,False]

  reverse_nat_pkt1:
    type: string
    label: Reverse NAT on pkt1
    description: Enable/Disable reverse NAT on pkt1.
    default: True 
    constraints:
      - allowed_values: [True,False]

############################
# Private Network Settings
############################

  private_network_mgt0:
    type: string
    label: Management Port Private Network Name or ID
    description: Name/ID of private network for mgt0.
    constraints:
      - custom_constraint: 'neutron.network'

  private_network_ha:
    type: string
    label: HA Port Private Network Name or ID
    description: Name/ID of private network for ha0.
    constraints:
      - custom_constraint: 'neutron.network'

  private_network_pkt0:
    type: string
    label: Packet Port 0 Private Network Name or ID
    description: Name/ID of private network for pkt0.
    constraints:
      - custom_constraint: 'neutron.network'

  private_network_pkt1:
    type: string
    label: Packet Port 1 Private Network Name or ID
    description: Name/ID of private network for pkt1.
    constraints:
      - custom_constraint: 'neutron.network'

############################
# Private Subnet Settings
############################

  private_subnet_mgt0:
    type: string
    label: Management Port Private Subnet Name or ID
    description: Name/ID of private subnet for mgt0.

  private_subnet_ha:
    type: string
    label: HA Port Private Subnet Name or ID
    description: Name/ID of private subnet for ha0.

  private_subnet_pkt0:
    type: string
    label: Packet Port 0 Private Subnet Name or ID
    description: Name/ID of private subnet for pkt0.

  private_subnet_pkt1:
    type: string
    label: Packet Port 1 Private Subnet Name or ID
    description: Name/ID of private subnet for pkt1.

############################
# Instance Specific Settings
############################
  sbc_active_name:
    type: string
    label: SBC (Assigned) Active Instance Name
    description: SBC active instance name.
    constraints:
      - length: { min: 0, max: 63 }
        description: "Enter valid active instance name. Length of this string should be less than 63"
      - allowed_pattern: "^[A-Za-z]{1}[-A-Za-z0-9.]*[A-Za-z0-9]{1}$"
        description: "Enter valid active instance name. Regex: ^[A-Za-z]{1}[-A-Za-z0-9.]*[A-Za-z0-9]{1}$ "

# Resource definitions for all openstack objects to be configured during 
# template execution
resources:

  # Create active vSBC instance
  vSBC_ACTIVE:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: image }
      flavor: { get_param: flavor }
      config_drive: True

      # Attach previously created network ports to the instance
      networks:
        - port: { get_resource: mgt0_port1 }
        - port: { get_resource: ha0_port1 }
        - port: { get_resource: pkt0_port1 }
        - port: { get_resource: pkt1_port1 }

      # Publish the assigned floating IP addresses with appended subnet mask to the openstack metadata service.
      # Subnet prefix for floating ips not used - hard coded to 32 for consistencey.
      metadata:
        FloatingIPv4Mgt0: { get_attr: [mgt0_floating_ip1, floating_ip_address] }
        FloatingIPv4Pkt0: { get_attr: [pkt0_floating_ip, floating_ip_address] }
        FloatingIPv4Pkt1: { get_attr: [pkt1_floating_ip, floating_ip_address] }

      # Set the format to RAW to pass data directly as userdata set the floating and virtual IP counts
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
                #cloud-config
                write_files:
                -   content: |
                        {
                          "FloatingIPCountPkt0" : "$p0fic",
                          "FloatingIPCountPkt1" : "$p1fic",
                          "ReverseNatPkt0" : "$enablePkt0",
                          "ReverseNatPkt1" : "$enablePkt1",
                          "CEName" : "$ce_name",
                          "SystemName" : "$system_name",
                          "EmsUsername" : "None",
                          "EmsPassword" : "None",
                          "EmsIP" : "None",
                          "EmsPrivateNodeParameters" : { "cluster_id": "None" , "vnfc_id": "None" }
                        }
                    path: /opt/sonus/userData.json
                users:
                  - name: linuxadmin
                    ssh-authorized-keys:
                      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA4oGIi+0mRS9Q25ln5/gKe1mmR7cfVuFxRQONVbjq8y+JB0g2T49b1Bf8xRhyhkKgdbIbEWdcmboSpTegt6zM0rz6Yw/73c3NVy60CX47t55GCCFYXxt3uwgRlN/9KX1mETCYOSD5AZ7e9YXvbd6/hUKkK/o8Zrhch9ckR2nVSe0v1wob4MMhmC1e9LV5tvk6zAIdmTWOYcrg0Yd6yHRQbNjlVFpQ147TPGy12+tDytqEW+09DQZqvhuiwSyxk3lBlNJYfCT2VidsS2+MQYD+t2REc65vcq/EvXuyuwpvv/IIjX2BBMCG7fMXkGh0wnIPoHbUCNfq1Zr2JGqZ6D8GIQ==

          params:
              $p0fic: { get_param: floating_ip_count_pkt0 }
              $p1fic: { get_param: floating_ip_count_pkt1 }
              $enablePkt0: { get_param: reverse_nat_pkt0 }
              $enablePkt1: { get_param: reverse_nat_pkt1 }
              $ce_name: { get_param: sbc_active_name  }
              $system_name: { get_param: sbc_system_name }


  # Create the four required virtual nics (ports) to attach to virtual SBC instance 1


  mgt0_port1:
    type: OS::Neutron::Port
    properties:
      network: { get_param : private_network_mgt0 }
      fixed_ips:
        - subnet: { get_param: private_subnet_mgt0 }
      security_groups:
        - { get_param: security_group }

  ha0_port1:
    type: OS::Neutron::Port
    properties:
      network: { get_param : private_network_ha }
      fixed_ips:
        - subnet: { get_param: private_subnet_ha }

  pkt0_port1:
    type: OS::Neutron::Port
    properties:
      network: { get_param : private_network_pkt0 }
      fixed_ips:
        - subnet: { get_param: private_subnet_pkt0 }
      security_groups:
        - { get_param: security_group }


  pkt1_port1:
    type: OS::Neutron::Port
    properties:
      network: { get_param : private_network_pkt1 }
      fixed_ips:
        - subnet: { get_param: private_subnet_pkt1 }
      security_groups:
        - { get_param: security_group }


  # Create and associate three floating IP addresses to the mgt0, pkt0 and pkt1 ports of instance 1

  mgt0_floating_ip1:
    type: "OS::Heat::ResourceGroup"
    depends_on: mgt0_port1
    properties:
      count: { get_param: floating_ip_count_mgt0 }
      resource_def:
        type: OS::Neutron::FloatingIP
        properties:
          floating_network: { get_param: mgt0_ext_network }
          port_id: { get_resource: mgt0_port1 }

  pkt0_floating_ip:
    type: "OS::Heat::ResourceGroup"
    depends_on: pkt0_port1
    properties:
      count: { get_param: floating_ip_count_pkt0 }
      resource_def:
        type: OS::Neutron::FloatingIP
        properties:
          floating_network: { get_param: pkt0_ext_network }
          port_id: { get_resource: pkt0_port1}


  pkt1_floating_ip:
    type: "OS::Heat::ResourceGroup"
    depends_on: pkt1_port1
    properties:
      count: { get_param: floating_ip_count_pkt1 }
      resource_def:
        type: OS::Neutron::FloatingIP
        properties:
          floating_network: { get_param: pkt1_ext_network }
          port_id: { get_resource: pkt1_port1}


# output some stuff for debug
outputs:
  instance_name:
    description: Name of the instance
    value: { get_attr: [vSBC_ACTIVE, name] }

  mgt0_Public_ip:
    description: mgt0 floating IP address for the instance
    value: { get_attr: [mgt0_floating_ip1, floating_ip_address] }

  pkt0_Public_ip:
    description: Public IP address used for the pkt0 interfaces
    value: { get_attr: [pkt0_floating_ip, floating_ip_address] }

  pkt1_Public_ip:
    description: Public IP address used for the pkt1 interfaces
    value: { get_attr: [pkt1_floating_ip, floating_ip_address] }
