.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Win32::GuiTest::Cmd 3pm"
.TH Win32::GuiTest::Cmd 3pm "2007-10-23" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Win32::GuiTest::Cmd \- Perl Batch File Enhancer. Part of Win32::GuiTest.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Win32::GuiTest::Cmd \*(Aq:ASK\*(Aq;
\&
\&  Pause("Press ENTER to start the setup...");
\&
\&  setup_network() 
\&    if YesOrNo("Setup networking component?");
\&
\&  $address = AskForIt("What\*(Aqs your new ip address?", 
\&    "122.122.122.122");
\&
\&  $dir = AskForDir("Where should I put the new files?", 
\&    "c:\e\etemp");
\&
\&  copy_files($dir) if $dir;
\&
\&  $exe = AskForExe("Where is your net setup program?", 
\&    "/foo/bar.exe");
\&
\&  system($exe) if YesOrNo("Want me to run the net setup?");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Instead of writing batch files (although on \s-1NT\s0 they are almost
usable), I've resorted more and more to writing Perl scripts for
common sysadmin/build/test chores. This module makes that kind of
thing easier.
.PP
Other modules I've found useful for that kind of work:
.PP
\&\f(CW\*(C`use Win32::NetAdmin;\*(C'\fR
.PP
\&\f(CW\*(C`use Win32::NetResource;\*(C'\fR
.PP
\&\f(CW\*(C`use Win32::ODBC;\*(C'\fR
.PP
\&\f(CW\*(C`use Socket;\*(C'\fR
.PP
\&\f(CW\*(C`use Sys::Hostname;\*(C'\fR
.PP
\&\f(CW\*(C`use File::Path  \*(Aqmkpath\*(Aq;\*(C'\fR
.PP
\&\f(CW\*(C`use Getopt::Std \*(Aqgetopts\*(Aq;\*(C'\fR
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "Console"
.IX Subsection "Console"
Console interaction functions heavily based on the command-line installer for 
the libwin32 distribution written by Gurusamy Sarathy.
.IP "Pause([$message])" 4
.IX Item "Pause([$message])"
Shows a message and waits until the user presses \s-1ENTER.\s0
.IP "YesOrDie([$message])" 4
.IX Item "YesOrDie([$message])"
Asks for a [y/n] response using the message you specify. The program
dies if you answer 'n'.
.IP "YesOrNo([$msg])" 4
.IX Item "YesOrNo([$msg])"
Asks for a [y/n] response using the message you specify. Returns 1 if
you type 'y' or 0 otherwise.
.IP "AskForIt([$question],[$def_value])" 4
.IX Item "AskForIt([$question],[$def_value])"
Asks the user to input a value and returns it. If you omit \f(CW$question\fR
a default question will be used. If you omit \f(CW$def_value\fR, false will be used
as default return value.
.IP "IsExe($filename)" 4
.IX Item "IsExe($filename)"
Checks if a file is executable.
.IP "AskForExe([$question],[$def_exe])" 4
.IX Item "AskForExe([$question],[$def_exe])"
Just like AskForIt, but returns false if the value 
is not an executable file.
.IP "AskForDir([$question],[$def_dir])" 4
.IX Item "AskForDir([$question],[$def_dir])"
Just like AskForIt, but returns false if the value 
is not a directory.
.IP "AskAndRun([$question],[$def_exe])" 4
.IX Item "AskAndRun([$question],[$def_exe])"
Asks for an exe file an runs it using \f(CW\*(C`system\*(C'\fR.
.SS "System Configuration"
.IX Subsection "System Configuration"
Mostly allow opening Win32 Control Panel Applets programatically.
.IP "RunCpl($applet)" 4
.IX Item "RunCpl($applet)"
Opens a Control Panel Applet (.cpl) by name.
.Sp
.Vb 1
\& RunCpl("modem.cpl");
.Ve
.IP "Modem, Network, Console, Accessibility, AppWizard, Pcmcia, Regional, Joystick, Mouse, Multimedia, Odbc, Ports, Server, System, Telephony, DateTime, Ups, Internet, Display, FindFast, Exchange, 3ComPace" 4
.IX Item "Modem, Network, Console, Accessibility, AppWizard, Pcmcia, Regional, Joystick, Mouse, Multimedia, Odbc, Ports, Server, System, Telephony, DateTime, Ups, Internet, Display, FindFast, Exchange, 3ComPace"
Each of them opens the corresponding Control Panel Applet.
.IP "Ras" 4
.IX Item "Ras"
Installs or configures the \s-1RAS \s0(Remote Access Service) component.
.IP "Users" 4
.IX Item "Users"
Runs the User/Group Manager application.
.SS "Registry"
.IX Subsection "Registry"
Manipulate the registry.
.IP "RegisterCom($path)" 4
.IX Item "RegisterCom($path)"
Uses regsvr32.exe to register a \s-1COM\s0 server.
.Sp
.Vb 1
\&  RegisterCom("c:\e\emyfiles\e\emycontrol.ocx");
.Ve
.IP "UnregisterCom($path)" 4
.IX Item "UnregisterCom($path)"
Uses regsvr32.exe to unregister a \s-1COM\s0 server.
.Sp
.Vb 1
\&  UnregisterCom("c:\e\emyfiles\e\emycontrol.ocx");
.Ve
.IP "AddToRegistry($regfile)" 4
.IX Item "AddToRegistry($regfile)"
Uses regedit.exe to merge a .reg file into the system registry.
.Sp
.Vb 1
\&  AddToRegistry("c:\e\emyfiles\e\etest.reg");
.Ve
.SS "Misc"
.IX Subsection "Misc"
Sorry about that...
.IP "WhichExe($file)" 4
.IX Item "WhichExe($file)"
Takes a command name guesses which 
executable file gets executed if you invoke the command.
.Sp
.Vb 3
\&    WhichExe("regedit")  \-> C:\eWINNT\eregedit.exe
\&    WhichExe("regsvr32") \-> D:\ebin\eregsvr32.exe
\&    WhichExe("ls")       \-> D:\eUsr\eCygnus\eB19\eH\-i386\-cygwin32\ebin\els.exe
.Ve
.Sp
Based on original code grabbed from CPAN::FirstTime.
.Sp
Added support for \s-1NT\s0 file extension associations:
.Sp
.Vb 2
\&   WhichExe("test.pl")   \-> perl D:\eSCRIPTS\etest.pl %*
\&   WhichExe("report.ps") \-> D:\egstools\egsview\egsview32.exe D:\eTMP\ereport.ps
.Ve
.IP "TempFileName" 4
.IX Item "TempFileName"
Returns the full path for a temporary file that will not collide with an
existing file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ernesto Guisado <erngui@acm.org>, <http://triumvir.org>
